// Code generated by go-bindata.
// sources:
// define.go
// doc.go
// normal.json
// styles.go
// DO NOT EDIT!

package styles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defineGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xb1\x4e\xc3\x30\x10\xc6\xf1\xd9\xf7\x14\x47\x07\x14\x2f\xe9\x8e\xd4\x89\x0d\x41\x18\x2a\x26\xc4\x70\x31\x4e\x72\x4a\x7c\x8e\xce\x8e\xaa\x12\xf9\xdd\x91\xdb\xae\xdf\xff\xee\xb7\x92\x9b\x69\xf4\x98\xf2\x75\xf1\x09\x80\xc3\x1a\x35\xe3\x61\xe4\x3c\x6d\x7d\xeb\x62\x38\x5e\xfe\xd2\xc4\x81\x65\x3c\xae\x3d\xe9\x01\x60\xd8\xc4\x61\xe7\x2f\x5d\xd4\x40\xcb\xb9\x7e\x36\x16\x77\x80\xf2\x68\xef\x91\x7e\x5f\xa3\x0c\x3c\x36\x2e\xca\x80\xdf\x3f\xfd\x35\x7b\x8b\x1f\xa4\x33\xee\x60\x02\xe9\x9c\xf0\xe5\x84\xcf\x55\x6c\xeb\x9c\xf6\x02\xc6\xab\xd6\xf5\x96\xdb\x2f\x09\xa4\x69\xa2\xe5\xed\xfc\xd9\x35\x77\xe2\xc6\x59\x0b\x86\x07\xac\xc7\x4f\x27\x14\x5e\x2a\x69\x56\x12\x76\x8d\x57\xb5\x60\x0a\x18\xf5\x79\x53\xb9\x53\x50\xe0\x3f\x00\x00\xff\xff\xf4\xed\xd3\xdd\xe7\x00\x00\x00")

func defineGoBytes() ([]byte, error) {
	return bindataRead(
		_defineGo,
		"define.go",
	)
}

func defineGo() (*asset, error) {
	bytes, err := defineGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "define.go", size: 231, mode: os.FileMode(420), modTime: time.Unix(1542016785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2e\xa9\xcc\x49\x2d\xe6\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x87\xaa\x52\xd0\xcd\x87\xb2\xf4\xd2\xf3\x15\xf4\xf4\xb9\x00\x01\x00\x00\xff\xff\xfe\x06\x2e\x4f\x45\x00\x00\x00")

func docGoBytes() ([]byte, error) {
	return bindataRead(
		_docGo,
		"doc.go",
	)
}

func docGo() (*asset, error) {
	bytes, err := docGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.go", size: 69, mode: os.FileMode(420), modTime: time.Unix(1542016803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _normalJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x4a\xc6\x30\x10\x84\xef\x7d\x8a\x65\xce\xf9\x55\x04\x3d\x04\x3c\xf8\x0b\xbd\x48\xb1\x14\xc1\x43\x5b\x24\x98\xa8\xc1\x98\x40\x08\x22\xb4\x79\x77\x69\x9b\x68\x29\x22\x42\x2f\x0b\x99\xe4\xdb\x99\x4c\x3b\x14\x44\x44\x78\xbc\xd5\x56\x82\x13\xee\xd5\x67\x00\x5b\xc4\x52\x1b\xa3\xfc\xa4\x52\x96\x1a\x67\x0c\x38\x5d\xa4\xe3\x83\x96\xe1\x15\x9c\xce\xcf\x92\x30\xe3\x9c\x30\x0c\x27\x37\xce\x06\x65\x43\x8c\x28\x22\xa3\xbf\x7c\x32\x34\xfe\xfa\xf2\x28\x3c\x36\x76\x97\xd9\xae\x16\x52\x6a\xfb\x72\x14\xbe\x74\xfe\x1d\x3c\xc1\x9b\xf4\x57\x98\xd5\x98\xa0\x4a\xcb\x4a\xf8\xb7\x44\xb4\x2b\xe4\xdb\x73\xfe\x26\xfb\xb9\xb8\xfb\xc8\x9b\x56\x62\xea\xa2\xc5\x01\x8c\xd0\x75\xd3\x1c\xa7\x71\x8a\x7e\x31\xec\x73\x4c\x65\xff\x11\xf3\x90\x62\xee\xab\xab\x56\xfe\x49\xd9\xb0\xb3\xf4\x46\x04\xed\x76\xee\xb8\x7e\x0e\xca\xa3\x88\xfd\x57\x00\x00\x00\xff\xff\x9e\xa3\x4b\x0f\x65\x02\x00\x00")

func normalJsonBytes() ([]byte, error) {
	return bindataRead(
		_normalJson,
		"normal.json",
	)
}

func normalJson() (*asset, error) {
	bytes, err := normalJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "normal.json", size: 613, mode: os.FileMode(420), modTime: time.Unix(1542016267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x8f\xdb\xb8\x11\x7e\x96\xfe\x0a\x9e\x81\x3b\x58\xc5\xd6\xab\xdf\x3f\x0c\xec\xcb\x25\x69\x91\x02\xcd\x01\x6d\xfa\xd4\x29\x0e\xa4\x44\x6e\xd5\xda\xd6\x56\xb2\xaf\xb3\x1b\xec\xff\x5e\x7c\x1c\x7a\xd7\xd9\xcb\x5d\x7a\x41\x1e\x64\x53\x14\x39\xf3\xcd\xcc\xc7\x6f\x78\x7d\xad\x5e\x4d\x83\x55\xb7\xf6\x60\x67\x7d\xb4\x83\x32\xf7\xea\x76\xfa\xbd\x19\x0f\x83\x3e\xea\x4d\x7c\x7d\xad\x96\xe9\x34\xf7\x76\xd9\x62\x3c\x58\x37\x1e\xec\xe6\x76\xf2\x2f\x53\x1f\x46\x87\x69\xde\xeb\xdd\xe6\x5f\xcb\x74\xf0\x3b\x8e\xf7\x3b\xbb\x84\x6f\xaf\x7f\x50\xef\x7e\x78\xaf\xde\xbc\x7e\xfb\xfe\x9b\x38\xbe\xd3\xfd\xbf\xf5\xad\x0d\x4b\xe2\x78\xdc\xdf\x4d\xf3\x51\xad\xe3\x68\x65\xee\x8f\x76\x59\xc5\xd1\xaa\x9f\xf6\x77\xb3\x5d\x96\xeb\xdb\x87\xf1\x0e\x13\x6e\x7f\xc4\xdf\x38\xc9\xef\xf5\x38\x9d\x8e\xe3\x0e\x2f\x93\xdf\x70\xa7\x8f\xff\xbc\x76\xe3\xce\x62\x80\x89\xe5\x38\x8f\x87\x5b\xff\xed\x38\xee\xed\x2a\x4e\xe2\xd8\x9d\x0e\xbd\x0a\x71\xfd\xc5\xea\x61\x8d\x81\xfa\xfb\x3f\xe0\xf6\x4a\x1d\xf4\x1e\xa0\xb0\x2d\x51\xeb\xf3\xac\x9d\xe7\x69\x4e\xd4\x87\x38\xba\x7d\xf0\x6f\x6a\x7b\xa3\x80\x6a\xf3\xce\xfe\x17\x46\xec\xbc\xf6\xb0\xf1\xfe\xfd\xc9\x39\x3b\x7b\xb3\x49\x12\x47\xa3\xf3\x1b\xbe\xb9\x51\x87\x71\x07\x13\xd1\x6c\x8f\xa7\xf9\x80\xd7\x2b\xe5\xf6\xc7\xcd\x1b\x58\x77\xeb\x15\x0c\xa9\x6f\xff\xb3\x55\xdf\xfe\xb4\x12\x24\xde\x57\x12\x47\x8f\x71\x1c\xfd\xa4\x67\x65\x4e\x4e\x89\x1f\x71\x12\x47\x3f\x0a\x9c\x1b\x35\x4e\x9b\x57\xd3\xdd\xfd\xfa\x3b\x73\x72\x57\xea\xf6\x21\x89\xa3\x7e\xf7\xe6\x8c\x74\xf3\x6a\x37\x2d\x76\x9d\xc4\x5f\x0b\x0f\xcc\x88\xfd\x5f\x30\x64\xe7\x59\x70\x87\x49\x73\x72\x9b\xef\x01\x7d\x9d\x5c\x61\x45\xfc\x18\xc7\xc7\xfb\x3b\xab\xf4\xb2\xd8\x23\x52\x7e\xea\x8f\xb0\xe2\xe3\x0b\xf5\x88\xa3\xf1\xe0\x26\xa5\xa6\x65\xf3\x87\x71\x67\xdf\x1e\xdc\xf4\xb4\x2f\x94\xf0\x3c\x7f\x61\xc1\xd7\x50\xa9\x50\xc6\x38\x5a\xc6\x07\xff\x3e\x1e\x8e\x75\x19\x47\x7b\x10\x5d\x3d\x19\xfd\xf3\x34\x58\x3f\xf9\x7e\xdc\x5b\x05\x9a\x6c\x30\x82\x1f\x4f\x95\xb5\x1b\x5f\xfa\x4a\xd4\x3b\xbd\xb7\xeb\x24\x78\x80\xcf\x10\xa5\x1b\x37\xf0\x1e\x3f\xfe\xca\xde\xbf\x8e\x0f\xd8\xeb\xd1\x7c\xbc\x15\x40\x7f\x75\x2b\xb0\xae\x93\x4b\xe4\x1f\x1b\x40\x68\x9f\x33\x80\xe0\xd6\xc9\x73\xa0\x3f\xb3\x10\xa2\xff\x65\x23\x6f\x97\xd7\xe3\xbc\x4e\x94\x99\xa6\xdd\xe5\x6e\xbd\x5b\x3e\x13\xf9\xfd\x22\x81\xdb\xd9\xe9\xde\x7e\x78\xbc\xd8\x1d\x28\x01\x96\xff\x28\xea\xf2\xc7\x49\xdd\x04\x1e\xac\x57\xc4\x99\x23\x6e\x0d\x71\xda\x12\xa7\xe9\xa7\x1f\xe7\x88\xf3\x9e\xb8\xef\x89\x4d\x46\x5c\x5a\xe2\xbe\x20\x2e\x52\xe2\x2c\x25\xee\x6b\x62\x97\x11\x0f\x1d\xb1\x6b\x88\xb3\x92\xb8\x6c\x88\xd3\x30\xce\x1d\xb1\xed\x88\x5b\x4b\x3c\x94\xc4\x6d\x47\x9c\x0e\xc4\x65\x46\x9c\xb5\xc4\xb9\x26\xce\x6b\xe2\xbe\x24\x6e\x52\xe2\x22\xf8\x68\x72\xe2\x52\x13\x37\xbd\xec\xed\xad\xfc\x6b\x4d\x9c\xe5\xc4\xae\x23\x1e\x06\xe2\x0e\xbe\x0d\xb1\x86\x7d\x27\x78\xad\x25\x36\x0d\x71\x97\x13\x77\x86\xb8\x06\xb6\x92\xb8\x6b\x89\x5d\x4e\xdc\x54\x82\x39\x05\xae\x54\xe2\xc9\x34\x71\x51\x11\xdb\x82\xb8\xce\x88\x6d\x49\x5c\xf4\xc4\xf5\x40\xdc\x0c\xc4\x16\x76\x72\xe2\xa2\x25\xae\x2c\xb1\x83\xbf\x5c\x70\xb7\x19\x71\x5d\xc9\x7a\xe0\x28\x06\x89\x39\xc5\x7c\x4a\x3c\xb4\xb2\xce\xdb\x6d\x24\x27\xd5\x20\xf9\x28\xe1\xdf\x10\x9b\x8e\xb8\xc1\xde\x9a\x38\xab\x89\x9b\x46\xb0\x01\x6f\xdd\x12\x5b\x27\xb1\x62\x4d\xe5\x88\x75\x41\x9c\xf6\xe2\x13\x7b\x72\xe4\x48\xcb\x1e\xe4\xa1\x40\x2e\x06\x89\xa9\x31\x52\x67\xd4\x5b\x23\xae\x42\x72\x04\x6c\x69\x2e\x58\xbb\x9e\xd8\xa5\xc4\xb6\x22\x6e\x4b\xe2\x1e\x18\x2b\xe2\xba\x97\xd8\xfd\xf7\x5a\xd6\xa3\xe6\xda\x10\x0f\xa8\x7d\x45\xdc\xd5\x52\x03\xc4\x85\x9c\xc2\x07\x72\xae\x73\xb1\x67\x07\x62\xd7\x0b\x47\x3c\x9e\x86\xd8\x06\x3b\x15\xf2\x04\x7c\xb5\x70\x46\x83\x6b\x0d\x71\x09\xde\x05\x0e\x21\xdf\xe0\x09\x6c\x56\xb5\xd4\xbf\xa9\x89\xdb\x81\xb8\x6a\x88\x4d\x15\x62\xd1\xc2\x29\x60\x6a\xb0\xb6\x90\xbc\xe2\xbf\x42\x6c\xa9\xe4\xe5\x92\xdb\xfe\x29\x05\xe3\x50\x08\xa7\x50\xa3\xe7\x33\xb0\x3a\x77\xb8\xf3\x19\x0a\x9a\xfb\xa9\x5e\x76\x56\xe6\x8b\x5e\x18\x47\xd1\xd3\xe9\xbb\x8a\xa3\x68\xf5\xd4\xe8\x57\x57\x71\x94\x3c\x89\xe2\x79\x0d\x0c\xff\xce\x2b\xf8\xa5\x61\x2f\xe1\x4f\x7d\xf2\x05\x92\xcf\x75\xa0\xa7\xc6\xe1\xa5\x7f\x7b\xf3\x52\x46\x3e\x40\x60\xb7\xea\x12\x99\x82\x70\x6e\x55\x5e\x64\x57\x0a\x12\xb8\xbd\x54\xc8\x75\x99\xa7\x89\x9f\x87\xb0\x6d\x45\xf8\xfe\x76\x18\x79\x9d\x55\x65\x9e\x66\x75\xd3\x56\x57\x2a\x4d\x1e\xe3\x48\xc3\xdd\x77\x3e\x9c\x0f\x3e\x86\xad\x0a\xa1\x00\xcb\xd6\xff\x3e\x3e\xe5\x4d\x5f\x7d\x2c\x5a\x53\xff\xa5\x8a\xa5\x89\xcb\x96\xb8\xec\x45\x39\xa0\x28\x18\x97\x81\xd5\x79\x2b\x27\x46\x77\xa2\x6c\x65\x47\x9c\xa3\xf2\xb5\x30\x13\x27\x7b\x08\x2c\xc4\x49\x80\x9a\x40\x8d\xfc\x3b\xd4\xcb\xc8\x7a\xcc\xe5\x61\x3f\xec\xc2\x27\xd6\xfb\xbd\x83\x9c\x48\x6f\xdf\x04\x1f\xe7\xb5\x25\xf1\x90\x8a\x8d\xbe\x15\x7c\x6d\x23\xea\x56\xe5\xf2\x0d\x7e\x30\x67\x72\x61\x28\x30\x39\x28\x55\x25\xef\x78\xc0\x6e\x1f\x77\xf6\x09\x56\x5b\xe2\x34\x28\x03\x70\x97\xd5\xa7\x59\x8d\x24\x7f\x01\xa5\xb1\x4d\xf8\xec\xef\xaa\x2f\xc8\x8c\xaf\xff\x17\x93\x2f\xbc\x7f\x35\x1a\x07\x40\x81\xc3\x75\xf7\x25\x14\x6e\xd3\xe2\x6b\x50\x58\xae\xef\x7f\x5a\xa6\xc3\x17\xf1\x18\x4a\xda\x81\x0b\x99\x70\x0d\x8a\x79\xee\xbc\x50\x69\x74\x05\x74\xa7\x56\x4b\x07\x02\xd7\x5d\xe0\x62\x5a\x4a\x27\x4a\x43\x27\x73\xad\x28\xad\x19\x84\xa7\xe8\xe6\x50\x57\x6f\x1b\x0a\x09\x4e\x87\x2e\xa9\x5b\x99\xc7\x18\x1d\x0a\x38\xf3\x9c\xd8\x94\xa2\xac\x50\x70\xa8\xb1\xef\xae\xf8\xd6\xc9\xf7\x32\x0f\x5d\x00\x1d\xa3\x93\x2e\x3a\x84\x31\xce\x5f\x61\xc2\x0d\x21\x3c\x0d\x70\xa0\x33\x54\xa2\xec\x6d\x4e\x9c\x85\xee\x84\xb9\x3a\x28\x31\xb0\xa1\x83\xe2\x6c\x64\x46\xba\x1f\x3a\x8a\x0e\x73\xe8\x40\xe8\xe0\x7e\x7d\x1f\xba\xf4\x20\xdf\xd1\xd1\xdb\x42\xd6\xd8\x4c\xce\x4f\x17\x74\x01\x67\x15\xb7\x04\xe4\x14\xeb\x30\x8f\x31\x6c\xa0\xfb\x14\x8d\xac\xc3\x39\x42\x7e\x91\xa7\xb6\x0f\xfa\x91\x0b\x0e\xe3\xe4\x96\x52\xc0\x4e\x29\xe7\xce\x69\xe9\xdc\x58\x77\xee\xd0\xe8\x58\x5d\x23\x5d\x10\xb7\x04\x74\x79\x60\xaf\xb1\xd6\xc8\x8d\x07\xb9\x31\xb8\xfd\x04\x3b\xd9\x20\xfb\x7d\x2d\x8c\x9c\x79\x74\x3c\xd4\x05\xf9\xf1\xb5\x4a\x03\x37\x8c\xfc\xa3\xce\x5e\xaf\x4a\xa9\x57\x6e\x9e\xeb\xd0\x14\x62\x17\x37\x2e\x17\x6e\x1d\xa6\x95\x31\x74\x08\x3e\x50\x07\xdc\x74\xac\x96\x0e\xde\x57\xa2\x2f\x88\x1b\xba\x84\xdb\x13\x3a\x65\x86\xfc\x37\xc4\x4d\x26\xfc\xf3\xb7\x17\xdc\x70\x7a\xf1\x83\x7a\x23\x67\xe0\x71\x96\x89\x76\x81\xcb\xde\xb6\x95\x1b\x84\x0e\xfe\x80\x09\xba\x88\xdc\x98\x94\xd8\x14\x12\x6b\x59\x0b\x7f\xd1\x9d\x91\x3f\x7f\xb3\x6b\xc5\x57\x1a\x6e\x3c\xa8\x41\xdb\xca\x6d\xa7\x6a\x7e\x7e\x86\xf0\x74\x56\xd6\x41\x87\x53\x27\xb8\x70\x93\x79\xa1\x85\xcf\xa7\xf5\xb7\x0b\xe2\xf3\x5e\xaf\x8a\x87\xff\x05\x00\x00\xff\xff\x2d\x37\x90\x5c\x00\x10\x00\x00")

func stylesGoBytes() ([]byte, error) {
	return bindataRead(
		_stylesGo,
		"styles.go",
	)
}

func stylesGo() (*asset, error) {
	bytes, err := stylesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1542016813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"define.go": defineGo,
	"doc.go": docGo,
	"normal.json": normalJson,
	"styles.go": stylesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"define.go": &bintree{defineGo, map[string]*bintree{}},
	"doc.go": &bintree{docGo, map[string]*bintree{}},
	"normal.json": &bintree{normalJson, map[string]*bintree{}},
	"styles.go": &bintree{stylesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

