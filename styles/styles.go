// Code generated by go-bindata.
// sources:
// normal.json
// pad.json
// DO NOT EDIT!

package styles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _normalJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x86\x39\x5b\x2c\x42\x2f\x01\x0f\x1a\x11\x44\x8c\xa5\x8a\x1e\xd2\x50\x16\xb3\xea\xc2\x66\x57\x96\x8d\x17\xdb\xff\x2e\x33\x89\xbb\x69\xb1\x25\xb7\xf6\x12\x76\x1e\xf3\x5e\xbe\x99\x29\x05\xe0\x1a\xcf\x04\xfc\x08\x00\x5c\xdd\x6b\x5b\x63\x06\xf8\xf4\xe6\x9d\x31\xa4\x03\x16\x6d\xa3\x3c\x66\xdc\x31\x68\xb9\xb3\x5f\x6d\xe0\x0e\xc0\x55\x21\x1b\x45\x62\xde\x7a\xaf\x6c\x40\x01\xb0\x61\xf3\x8d\xb2\xae\x19\x69\x7e\x76\x41\x9a\x64\xcd\x9d\x0d\x94\x35\xd2\xac\x83\x51\xbd\xf8\x22\x0d\x49\x85\x83\xc0\x6a\x8c\x7c\xd5\x75\xf8\xc4\x0c\x2e\xa6\x5c\x2e\x68\xc6\x0c\x66\x5c\xdc\x6a\x63\x78\x4e\x04\x14\xdc\xff\xdf\x62\xae\xa5\xc7\xad\xa8\xd9\xf4\xa8\x4b\x9a\xcb\xba\xd6\xf6\x23\xc1\x5f\x76\x78\x0f\x9a\x22\x4a\xf2\x72\xea\x20\x76\xf1\x77\xd9\x5d\xec\x3d\xff\xde\x83\xde\x13\xec\xe2\x8f\x08\x89\x23\xa4\x88\xc7\xef\x21\x7d\x3a\x4d\xd9\x7b\x27\x31\x65\xb9\x8c\xcf\x75\x7c\x9d\x77\x69\x15\x7d\x37\x02\xa0\xea\x76\xa3\xec\xf6\x6e\x26\x07\x0e\x3b\x57\x3e\xa7\xc9\x8e\x75\xcd\x83\x64\x27\x48\x75\xf5\x1e\x4e\x81\x4b\x54\xbf\x01\x00\x00\xff\xff\x25\xee\xa9\x7e\xc2\x04\x00\x00")

func normalJsonBytes() ([]byte, error) {
	return bindataRead(
		_normalJson,
		"normal.json",
	)
}

func normalJson() (*asset, error) {
	bytes, err := normalJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "normal.json", size: 1218, mode: os.FileMode(420), modTime: time.Unix(1542272781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _padJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\xc1\x4b\xc3\x30\x14\xc6\xef\xf9\x2b\x1e\xef\x28\x8a\x15\x11\xb1\x9e\x74\x22\x88\x3a\xc7\x14\x3d\x74\x65\x54\x9b\x6d\x81\x34\x95\x90\x7a\x71\xfd\xdf\x25\x49\x4d\xd3\xd2\xc2\x04\x91\x0a\xbd\x35\x1f\x79\xbf\xbe\xf7\x25\xf9\x22\x02\xb8\x28\x82\xe0\xe8\x35\x0a\xce\x4f\x33\xdc\x27\xf0\x49\x00\x70\x79\xcb\x44\x8a\x21\xe0\x65\x22\xb5\x08\xf8\xc2\x52\xb5\xc1\x10\xce\x02\xb3\x9c\x16\x19\x95\x18\x9a\xdd\xde\xf6\x1b\xf1\x5e\x28\x53\x00\xb8\x9c\x26\x19\xd5\xe2\xa4\x90\x92\x0a\x85\x04\xa0\x34\xc5\x57\x54\xe4\xd9\x8e\xc5\x4f\xb9\x4a\x78\x5d\x3a\x4b\xd2\x94\x89\xf5\x35\xe3\xdc\xfc\x1f\x01\x7d\xfd\x8e\xae\x14\x86\x10\x69\x86\xa1\x7b\xf8\xc7\x37\x99\x73\x6e\xf9\xad\x01\x7a\xba\xe8\x19\xa2\xea\xa5\x3d\xc8\x0e\x10\x37\x4c\x8d\x98\xe4\x42\x69\xee\x0f\x20\x4c\x71\xea\xe4\xe7\x84\x6b\x71\x9a\x83\x32\x7a\x03\xfe\x7d\x68\xc7\x41\x25\xcc\xb5\x03\x21\x9c\x54\x4b\xdf\x46\xad\x94\x04\x20\xf6\xfd\xbc\x67\x69\x9f\x9d\x33\x2a\x27\xba\xf1\xa1\xf8\x49\x1c\x07\x61\x6b\x6f\x45\x57\xcf\xc3\xea\xb7\xed\xf7\x9c\xad\x37\xbd\x17\xf8\x62\xa5\x86\xd6\x7f\xa7\xcb\xf3\x01\x3e\xb3\x87\x0f\x7b\xcf\xf7\xb0\xf9\x12\xa2\xaa\xf6\xc0\x51\x16\x0b\xf7\xb9\x75\x5f\x87\x96\x16\x37\x0f\xcd\x7b\x1d\x2e\x45\x33\xac\xcf\x94\x8a\xee\xac\xb2\xfa\x98\x55\xbf\x95\x55\xd6\xcf\x31\xab\xfe\x2a\xab\xac\xdf\x63\x56\xfd\x93\xac\x22\x50\x92\xf8\x2b\x00\x00\xff\xff\xa7\xd3\xff\x2e\xea\x09\x00\x00")

func padJsonBytes() ([]byte, error) {
	return bindataRead(
		_padJson,
		"pad.json",
	)
}

func padJson() (*asset, error) {
	bytes, err := padJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pad.json", size: 2538, mode: os.FileMode(420), modTime: time.Unix(1542272781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"normal.json": normalJson,
	"pad.json": padJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"normal.json": &bintree{normalJson, map[string]*bintree{}},
	"pad.json": &bintree{padJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

